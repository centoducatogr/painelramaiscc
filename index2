<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Painel de Ramais com WhatsApp</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f0f2f5;
      margin: 0;
      padding: 20px;
      color: #333;
    }

    h1 {
      text-align: center;
      color: #2c3e50;
      margin-bottom: 20px;
      font-size: 24px;
    }

    .container {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 15px;
      max-width: 1400px;
      margin: 0 auto;
    }

    .card {
      background: white;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      min-height: 150px;
      position: relative;
      border-left: 5px solid #ddd;
      transition: border 0.3s ease;
    }

    /* üî¥ BARRA LATERAL VERMELHA: se agente estiver offline em voz OU WhatsApp */
    .card.offline-border {
      border-left: 5px solid #F44336 !important;
    }

    .card::before {
      content: '';
      position: absolute;
      top: 10px;
      right: 10px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #ccc;
    }

    /* üîî ANIMA√á√ÉO DE PISCAR EM AZUL: sempre que estiver tocando */
    .card.combined-calling {
      animation: pulse-border-blue 1.5s infinite;
    }

    @keyframes pulse-border-blue {
      0% { border: 2px solid #2196F3; }
      50% { border: 2px solid #bbdefb; }
      100% { border: 2px solid #2196F3; }
    }

    .card h3 {
      margin: 0 0 8px 0;
      font-size: 15px;
      font-weight: bold;
      line-height: 1.3;
    }

    .agent, .status, .whatsapp-status {
      font-size: 13px;
      margin: 3px 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .status.calling  { color: #2196F3; font-weight: bold; }
    .status.in-use   { color: #FF9800; }
    .status.online   { color: #4CAF50; }
    .status.offline  { color: #9E9E9E; }

    .whatsapp-status.online  { color: #25D366; }
    .whatsapp-status.active  { color: #128C7E; font-weight: 500; }
    .whatsapp-status.offline { color: #9E9E9E; }

    .icon {
      font-size: 16px;
      margin-right: 5px;
    }

    /* Cores do indicador principal */
    .card.combined-online::before    { background-color: #4CAF50; }
    .card.combined-in-use::before    { background-color: #FF9800; }
    .card.combined-calling::before   { background-color: #2196F3; }
    .card.combined-offline::before   { background-color: #F44336; }

    /* Bot√µes flutuantes */
    .controls {
      position: fixed;
      top: 20px;
      left: 20px;
      display: flex;
      gap: 10px;
      z-index: 1000;
    }

    .btn {
      width: 44px;
      height: 44px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      transition: transform 0.2s;
    }

    .btn:hover { transform: scale(1.05); }

    #btn-som { background-color: #4CAF50; }
    #btn-som.muted { background-color: #F44336; }

    #btn-fullscreen { background-color: #7f8c8d; }
    #btn-fullscreen.full { background-color: #3498db; }

    /* Bot√µes de atualiza√ß√£o */
    .refresh-controls {
      text-align: center;
      margin: 20px auto;
      padding: 15px;
      max-width: 800px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: flex;
      justify-content: center;
      gap: 15px;
      position: relative;
      z-index: 100;
    }

    .btn-refresh {
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.2s;
    }

    .btn-refresh:hover {
      transform: translateY(-2px);
    }

    .btn-refresh.atualizar { background-color: #4CAF50; color: white; }
    .btn-refresh.auto { background-color: #2196F3; color: white; }
    .btn-refresh.parar { background-color: #F44336; color: white; }

    @media (max-width: 480px) {
      .controls { left: 10px; }
      .btn { width: 40px; height: 40px; font-size: 18px; }
      .refresh-controls { flex-direction: column; align-items: center; }
    }
  </style>
</head>
<body>

  <!-- Bot√µes flutuantes -->
  <div class="controls">
    <button id="btn-som" title="Alternar Som">üîä</button>
    <button id="btn-fullscreen" title="Tela Cheia">üñ•Ô∏è</button>
  </div>

  <h1>üîî PAINEL DE MONITORAMENTO DE RAMAIS E WHATSAPP</h1>

  <div class="container" id="ramais-container">
    <!-- Cards gerados dinamicamente -->
  </div>

  <!-- Bot√µes de Atualiza√ß√£o -->
  <div class="refresh-controls">
    <button id="btn-atualizar" class="btn-refresh atualizar">
      üîÑ Atualizar Agora
    </button>
    <button id="btn-auto" class="btn-refresh auto">
      ‚è±Ô∏è Atualizar a cada 3s
    </button>
    <button id="btn-parar" class="btn-refresh parar" disabled>
      ‚è∏Ô∏è Parar Atualiza√ß√£o
    </button>
  </div>

  <!-- √Åudio oculto -->
  <audio id="audioAlerta" src="painel-ramal-toque.mp3" preload="auto"></audio>

  <script>
    const audioElement = document.getElementById("audioAlerta");
    const btnSom = document.getElementById("btn-som");
    const btnFullscreen = document.getElementById("btn-fullscreen");

    let somHabilitado = false;
    let somAtivado = true;
    let isFullscreen = false;

    // Controle de atualiza√ß√£o autom√°tica
    let intervalId = null;
    const btnAtualizar = document.getElementById("btn-atualizar");
    const btnAuto = document.getElementById("btn-auto");
    const btnParar = document.getElementById("btn-parar");

    // === CONTROLE DE SOM ===
    function toggleSom() {
      if (!somHabilitado) {
        audioElement.play().then(() => {
          audioElement.pause();
          audioElement.currentTime = 0;
          somHabilitado = true;
          somAtivado = true;
          atualizarBotaoSom();
        }).catch(() => alert("Clique novamente para ativar os sons."));
        return;
      }
      somAtivado = !somAtivado;
      atualizarBotaoSom();
      if (somAtivado) {
        audioElement.currentTime = 0;
        audioElement.play().catch(() => {});
      }
    }

    function atualizarBotaoSom() {
      btnSom.textContent = somAtivado ? 'üîä' : 'üîá';
      btnSom.classList.toggle('muted', !somAtivado);
    }

    function tocarSom() {
      if (!somHabilitado || !somAtivado) return;
      audioElement.currentTime = 0;
      audioElement.play().catch(err => console.error("Erro ao tocar som:", err));
    }

    // === TELA CHEIA ===
    function toggleFullscreen() {
      if (!isFullscreen) {
        document.documentElement.requestFullscreen?.() ||
        document.documentElement.webkitRequestFullscreen?.() ||
        document.documentElement.msRequestFullscreen?.();
        isFullscreen = true;
      } else {
        document.exitFullscreen?.() ||
        document.webkitExitFullscreen?.() ||
        document.msExitFullscreen?.();
        isFullscreen = false;
      }
      atualizarBotaoFullscreen();
    }

    function atualizarBotaoFullscreen() {
      btnFullscreen.textContent = isFullscreen ? 'üîΩ' : 'üñ•Ô∏è';
      btnFullscreen.classList.toggle('full', isFullscreen);
    }

    document.addEventListener("fullscreenchange", () => {
      isFullscreen = !!document.fullscreenElement;
      atualizarBotaoFullscreen();
    });

    document.addEventListener("webkitfullscreenchange", () => {
      isFullscreen = !!document.webkitFullscreenElement;
      atualizarBotaoFullscreen();
    });

    // === CONTROLE DE ATUALIZA√á√ÉO ===
    function iniciarAtualizacao() {
      if (intervalId) return;
      intervalId = setInterval(atualizarPainel, 3000);
      btnAuto.disabled = true;
      btnParar.disabled = false;
    }

    function pararAtualizacao() {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
      btnAuto.disabled = false;
      btnParar.disabled = true;
    }

    btnAtualizar.addEventListener("click", () => {
      pararAtualizacao();
      atualizarPainel();
    });

    btnAuto.addEventListener("click", iniciarAtualizacao);
    btnParar.addEventListener("click", pararAtualizacao);

    // === DADOS ===
    const ramais = [
      "BASE SASCAR 01", "BASE SASCAR 02", "BASE SASCAR 03",
      "BASE ONIXSAT 01", "BASE ONIXSAT 02", "BASE ONIXSAT 03",
      "BASE OMNILINK 01", "BASE AUTOTRAC 01",
      "BASE POSITRON 01", "BASE SIGHRA 01"
    ];

    const agentes = [
      "Maria Silva", "Carlos Oliveira", "Ana Souza", "Pedro Lima",
      "Juliana Costa", "Ricardo Almeida", "Fernanda Rocha",
      "Lucas Mendes", "Beatriz Nunes", "Eduardo Gomes"
    ];

    const statusVoz = {
      online:   { text: "üü¢ Online",        class: "online" },
      inUse:    { text: "üìû Em uso",        class: "in-use" },
      calling:  { text: "üîî Tocando",       class: "calling" },
      offline:  { text: "üî¥ Offline",       class: "offline" }
    };

    const statusWhatsApp = {
      online:   { icon: "üí¨", text: "WhatsApp Online",    class: "online" },
      active:   { icon: "üì±", text: "Em conversa",        class: "active" },
      offline:  { icon: "‚ö™", text: "WhatsApp Offline",   class: "offline" }
    };

    function getStatusVoz() {
      const r = Math.random();
      if (r < 0.4) return "online";
      if (r < 0.6) return "inUse";
      if (r < 0.8) return "calling";
      return "offline";
    }

    function getStatusWhatsApp() {
      const r = Math.random();
      if (r < 0.6) return "online";
      if (r < 0.9) return "active";
      return "offline";
    }

    let ultimoStatusCalling = {};

    function atualizarPainel() {
      const container = document.getElementById("ramais-container");
      container.innerHTML = "";

      ramais.forEach((ramal, index) => {
        const vozKey = getStatusVoz();
        const whatsappKey = getStatusWhatsApp();
        const voz = statusVoz[vozKey];
        const whatsapp = statusWhatsApp[whatsappKey];
        const agente = agentes[index];

        // ‚úÖ REGRA CORRIGIDA: Mostra agente se:
        // - Voz N√ÉO for offline, OU
        // - WhatsApp for 'online' ou 'active'
        const mostraAgente = (vozKey !== "offline") || (whatsappKey === "online") || (whatsappKey === "active");

        // ‚úÖ Barra lateral vermelha se o agente estiver offline em voz OU WhatsApp
        const agenteOffline = (vozKey === "offline") || (whatsappKey === "offline");
        if (agenteOffline) {
          // Mas se WhatsApp est√° em conversa, ainda mostra o agente
          if (whatsappKey === "active") {
            // For√ßa mostrar agente mesmo com voz offline
            // ‚Üí "em conversa" implica agente presente
          }
        }

        // ‚úÖ Status final do card (para indicador)
        let statusFinal = "offline";
        if (mostraAgente) {
          if (vozKey === "calling") {
            statusFinal = "calling";
          } else if (vozKey === "inUse") {
            statusFinal = "in-use";
          } else {
            statusFinal = "online";
          }
        }

        // üîî Toca som na transi√ß√£o para "calling" (se som ativado)
        if (vozKey === "calling" && !ultimoStatusCalling[ramal] && somAtivado) {
          tocarSom();
        }
        ultimoStatusCalling[ramal] = vozKey === "calling";

        const card = document.createElement("div");

        // Sempre aplica o piscar se estiver tocando
        card.className = `card ${vozKey === "calling" ? "combined-calling" : `combined-${statusFinal}`}`;

        // Adiciona barra vermelha se agente estiver offline em algum canal
        if (agenteOffline) {
          card.classList.add("offline-border");
        }

        // ‚úÖ Texto do agente: s√≥ oculta se N√ÉO for mostrar
        const agenteText = mostraAgente
          ? `<span class="agent">üéß ${agente}</span>`
          : '<span class="agent" style="color:#9E9E9E">üéß -</span>';

        const whatsappText = `
          <div class="whatsapp-status ${whatsapp.class}">
            <span class="icon">${whatsapp.icon}</span>
            ${whatsapp.text}
          </div>`;

        card.innerHTML = `
          <h3>${ramal}</h3>
          ${agenteText}
          <div class="status ${voz.class}">
            <span class="icon">${voz.text.split(" ")[0]}</span>
            ${voz.text.split(" ").slice(1).join(" ")}
          </div>
          ${whatsappText}
        `;

        container.appendChild(card);
      });
    }

    // === Inicializa√ß√£o ===
    btnSom.addEventListener("click", toggleSom);
    btnFullscreen.addEventListener("click", toggleFullscreen);

    atualizarBotaoSom();
    atualizarBotaoFullscreen();
    atualizarPainel(); // Primeira carga

    window.atualizarPainel = atualizarPainel;
  </script>
</body>
</html>
